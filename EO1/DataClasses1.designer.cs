#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EO1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EODB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertmember(member instance);
    partial void Updatemember(member instance);
    partial void Deletemember(member instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertInvitation(Invitation instance);
    partial void UpdateInvitation(Invitation instance);
    partial void DeleteInvitation(Invitation instance);
    partial void InsertForgotPass(ForgotPass instance);
    partial void UpdateForgotPass(ForgotPass instance);
    partial void DeleteForgotPass(ForgotPass instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertManagement(Management instance);
    partial void UpdateManagement(Management instance);
    partial void DeleteManagement(Management instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EODBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<member> members
		{
			get
			{
				return this.GetTable<member>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Invitation> Invitations
		{
			get
			{
				return this.GetTable<Invitation>();
			}
		}
		
		public System.Data.Linq.Table<ForgotPass> ForgotPasses
		{
			get
			{
				return this.GetTable<ForgotPass>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Management> Managements
		{
			get
			{
				return this.GetTable<Management>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.member")]
	public partial class member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Name;
		
		private string _Password;
		
		private string _Email;
		
		private string _PhoneNo;
		
		private string _Country;
		
		private System.Data.Linq.Binary _DisplayPic;
		
		private int _Verifystatus;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Invitation> _Invitations;
		
		private EntitySet<ForgotPass> _ForgotPasses;
		
		private EntitySet<Management> _Managements;
		
		private EntitySet<Management> _Managements1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNoChanging(string value);
    partial void OnPhoneNoChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnDisplayPicChanging(System.Data.Linq.Binary value);
    partial void OnDisplayPicChanged();
    partial void OnVerifystatusChanging(int value);
    partial void OnVerifystatusChanged();
    #endregion
		
		public member()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Invitations = new EntitySet<Invitation>(new Action<Invitation>(this.attach_Invitations), new Action<Invitation>(this.detach_Invitations));
			this._ForgotPasses = new EntitySet<ForgotPass>(new Action<ForgotPass>(this.attach_ForgotPasses), new Action<ForgotPass>(this.detach_ForgotPasses));
			this._Managements = new EntitySet<Management>(new Action<Management>(this.attach_Managements), new Action<Management>(this.detach_Managements));
			this._Managements1 = new EntitySet<Management>(new Action<Management>(this.attach_Managements1), new Action<Management>(this.detach_Managements1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayPic", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DisplayPic
		{
			get
			{
				return this._DisplayPic;
			}
			set
			{
				if ((this._DisplayPic != value))
				{
					this.OnDisplayPicChanging(value);
					this.SendPropertyChanging();
					this._DisplayPic = value;
					this.SendPropertyChanged("DisplayPic");
					this.OnDisplayPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verifystatus", DbType="Int NOT NULL")]
		public int Verifystatus
		{
			get
			{
				return this._Verifystatus;
			}
			set
			{
				if ((this._Verifystatus != value))
				{
					this.OnVerifystatusChanging(value);
					this.SendPropertyChanging();
					this._Verifystatus = value;
					this.SendPropertyChanged("Verifystatus");
					this.OnVerifystatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Event", Storage="_Events", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Invitation", Storage="_Invitations", ThisKey="UserId", OtherKey="EventHeadId")]
		public EntitySet<Invitation> Invitations
		{
			get
			{
				return this._Invitations;
			}
			set
			{
				this._Invitations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_ForgotPass", Storage="_ForgotPasses", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ForgotPass> ForgotPasses
		{
			get
			{
				return this._ForgotPasses;
			}
			set
			{
				this._ForgotPasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Management", Storage="_Managements", ThisKey="UserId", OtherKey="EventHeadId")]
		public EntitySet<Management> Managements
		{
			get
			{
				return this._Managements;
			}
			set
			{
				this._Managements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Management1", Storage="_Managements1", ThisKey="UserId", OtherKey="MemberId")]
		public EntitySet<Management> Managements1
		{
			get
			{
				return this._Managements1;
			}
			set
			{
				this._Managements1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_Invitations(Invitation entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_Invitations(Invitation entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_ForgotPasses(ForgotPass entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_ForgotPasses(ForgotPass entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.member = this;
		}
		
		private void detach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.member = null;
		}
		
		private void attach_Managements1(Management entity)
		{
			this.SendPropertyChanging();
			entity.member1 = this;
		}
		
		private void detach_Managements1(Management entity)
		{
			this.SendPropertyChanging();
			entity.member1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private int _UserId;
		
		private string _EName;
		
		private System.DateTime _SDate;
		
		private System.DateTime _Edate;
		
		private string _Venue;
		
		private string _Description;
		
		private EntitySet<Invitation> _Invitations;
		
		private EntitySet<Management> _Managements;
		
		private EntityRef<member> _member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnENameChanging(string value);
    partial void OnENameChanged();
    partial void OnSDateChanging(System.DateTime value);
    partial void OnSDateChanged();
    partial void OnEdateChanging(System.DateTime value);
    partial void OnEdateChanged();
    partial void OnVenueChanging(string value);
    partial void OnVenueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Event()
		{
			this._Invitations = new EntitySet<Invitation>(new Action<Invitation>(this.attach_Invitations), new Action<Invitation>(this.detach_Invitations));
			this._Managements = new EntitySet<Management>(new Action<Management>(this.attach_Managements), new Action<Management>(this.detach_Managements));
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EName
		{
			get
			{
				return this._EName;
			}
			set
			{
				if ((this._EName != value))
				{
					this.OnENameChanging(value);
					this.SendPropertyChanging();
					this._EName = value;
					this.SendPropertyChanged("EName");
					this.OnENameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDate", DbType="Date NOT NULL")]
		public System.DateTime SDate
		{
			get
			{
				return this._SDate;
			}
			set
			{
				if ((this._SDate != value))
				{
					this.OnSDateChanging(value);
					this.SendPropertyChanging();
					this._SDate = value;
					this.SendPropertyChanged("SDate");
					this.OnSDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Edate", DbType="Date NOT NULL")]
		public System.DateTime Edate
		{
			get
			{
				return this._Edate;
			}
			set
			{
				if ((this._Edate != value))
				{
					this.OnEdateChanging(value);
					this.SendPropertyChanging();
					this._Edate = value;
					this.SendPropertyChanged("Edate");
					this.OnEdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Venue", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Venue
		{
			get
			{
				return this._Venue;
			}
			set
			{
				if ((this._Venue != value))
				{
					this.OnVenueChanging(value);
					this.SendPropertyChanging();
					this._Venue = value;
					this.SendPropertyChanged("Venue");
					this.OnVenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Invitation", Storage="_Invitations", ThisKey="EventId", OtherKey="EventId")]
		public EntitySet<Invitation> Invitations
		{
			get
			{
				return this._Invitations;
			}
			set
			{
				this._Invitations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Management", Storage="_Managements", ThisKey="EventId", OtherKey="EventId")]
		public EntitySet<Management> Managements
		{
			get
			{
				return this._Managements;
			}
			set
			{
				this._Managements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Event", Storage="_member", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invitations(Invitation entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Invitations(Invitation entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invitation")]
	public partial class Invitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EventId;
		
		private int _EventHeadId;
		
		private string _MemberMailId;
		
		private int _status;
		
		private int _SequenceNo;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<member> _member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventHeadIdChanging(int value);
    partial void OnEventHeadIdChanged();
    partial void OnMemberMailIdChanging(string value);
    partial void OnMemberMailIdChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OnSequenceNoChanging(int value);
    partial void OnSequenceNoChanged();
    #endregion
		
		public Invitation()
		{
			this._Event = default(EntityRef<Event>);
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventHeadId", DbType="Int NOT NULL")]
		public int EventHeadId
		{
			get
			{
				return this._EventHeadId;
			}
			set
			{
				if ((this._EventHeadId != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventHeadIdChanging(value);
					this.SendPropertyChanging();
					this._EventHeadId = value;
					this.SendPropertyChanged("EventHeadId");
					this.OnEventHeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberMailId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberMailId
		{
			get
			{
				return this._MemberMailId;
			}
			set
			{
				if ((this._MemberMailId != value))
				{
					this.OnMemberMailIdChanging(value);
					this.SendPropertyChanging();
					this._MemberMailId = value;
					this.SendPropertyChanged("MemberMailId");
					this.OnMemberMailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequenceNo", DbType="Int NOT NULL")]
		public int SequenceNo
		{
			get
			{
				return this._SequenceNo;
			}
			set
			{
				if ((this._SequenceNo != value))
				{
					this.OnSequenceNoChanging(value);
					this.SendPropertyChanging();
					this._SequenceNo = value;
					this.SendPropertyChanged("SequenceNo");
					this.OnSequenceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Invitation", Storage="_Event", ThisKey="EventId", OtherKey="EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Invitations.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Invitations.Add(this);
						this._EventId = value.EventId;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Invitation", Storage="_member", ThisKey="EventHeadId", OtherKey="UserId", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.Invitations.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.Invitations.Add(this);
						this._EventHeadId = value.UserId;
					}
					else
					{
						this._EventHeadId = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForgotPass")]
	public partial class ForgotPass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Email;
		
		private int _UserId;
		
		private int _Pass;
		
		private EntityRef<member> _member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPassChanging(int value);
    partial void OnPassChanged();
    #endregion
		
		public ForgotPass()
		{
			this._member = default(EntityRef<member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="Int NOT NULL")]
		public int Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_ForgotPass", Storage="_member", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.ForgotPasses.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.ForgotPasses.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskId;
		
		private string _TaskName;
		
		private string _Description;
		
		private int _TStatus;
		
		private System.DateTime _Deadline;
		
		private int _NStatus;
		
		private int _SeqNo;
		
		private EntitySet<Management> _Managements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTStatusChanging(int value);
    partial void OnTStatusChanged();
    partial void OnDeadlineChanging(System.DateTime value);
    partial void OnDeadlineChanged();
    partial void OnNStatusChanging(int value);
    partial void OnNStatusChanged();
    partial void OnSeqNoChanging(int value);
    partial void OnSeqNoChanged();
    #endregion
		
		public Task()
		{
			this._Managements = new EntitySet<Management>(new Action<Management>(this.attach_Managements), new Action<Management>(this.detach_Managements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TStatus", DbType="Int NOT NULL")]
		public int TStatus
		{
			get
			{
				return this._TStatus;
			}
			set
			{
				if ((this._TStatus != value))
				{
					this.OnTStatusChanging(value);
					this.SendPropertyChanging();
					this._TStatus = value;
					this.SendPropertyChanged("TStatus");
					this.OnTStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deadline", DbType="Date NOT NULL")]
		public System.DateTime Deadline
		{
			get
			{
				return this._Deadline;
			}
			set
			{
				if ((this._Deadline != value))
				{
					this.OnDeadlineChanging(value);
					this.SendPropertyChanging();
					this._Deadline = value;
					this.SendPropertyChanged("Deadline");
					this.OnDeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NStatus", DbType="Int NOT NULL")]
		public int NStatus
		{
			get
			{
				return this._NStatus;
			}
			set
			{
				if ((this._NStatus != value))
				{
					this.OnNStatusChanging(value);
					this.SendPropertyChanging();
					this._NStatus = value;
					this.SendPropertyChanged("NStatus");
					this.OnNStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNo", DbType="Int NOT NULL")]
		public int SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Management", Storage="_Managements", ThisKey="TaskId", OtherKey="TaskId")]
		public EntitySet<Management> Managements
		{
			get
			{
				return this._Managements;
			}
			set
			{
				this._Managements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Management")]
	public partial class Management : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EventId;
		
		private int _EventHeadId;
		
		private int _MemberId;
		
		private int _TaskId;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<member> _member;
		
		private EntityRef<member> _member1;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnEventHeadIdChanging(int value);
    partial void OnEventHeadIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnTaskIdChanging(int value);
    partial void OnTaskIdChanged();
    #endregion
		
		public Management()
		{
			this._Event = default(EntityRef<Event>);
			this._member = default(EntityRef<member>);
			this._member1 = default(EntityRef<member>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventHeadId", DbType="Int NOT NULL")]
		public int EventHeadId
		{
			get
			{
				return this._EventHeadId;
			}
			set
			{
				if ((this._EventHeadId != value))
				{
					if (this._member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventHeadIdChanging(value);
					this.SendPropertyChanging();
					this._EventHeadId = value;
					this.SendPropertyChanged("EventHeadId");
					this.OnEventHeadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="Int NOT NULL")]
		public int TaskId
		{
			get
			{
				return this._TaskId;
			}
			set
			{
				if ((this._TaskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIdChanging(value);
					this.SendPropertyChanging();
					this._TaskId = value;
					this.SendPropertyChanged("TaskId");
					this.OnTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Management", Storage="_Event", ThisKey="EventId", OtherKey="EventId", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Managements.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Managements.Add(this);
						this._EventId = value.EventId;
					}
					else
					{
						this._EventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Management", Storage="_member", ThisKey="EventHeadId", OtherKey="UserId", IsForeignKey=true)]
		public member member
		{
			get
			{
				return this._member.Entity;
			}
			set
			{
				member previousValue = this._member.Entity;
				if (((previousValue != value) 
							|| (this._member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member.Entity = null;
						previousValue.Managements.Remove(this);
					}
					this._member.Entity = value;
					if ((value != null))
					{
						value.Managements.Add(this);
						this._EventHeadId = value.UserId;
					}
					else
					{
						this._EventHeadId = default(int);
					}
					this.SendPropertyChanged("member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="member_Management1", Storage="_member1", ThisKey="MemberId", OtherKey="UserId", IsForeignKey=true)]
		public member member1
		{
			get
			{
				return this._member1.Entity;
			}
			set
			{
				member previousValue = this._member1.Entity;
				if (((previousValue != value) 
							|| (this._member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._member1.Entity = null;
						previousValue.Managements1.Remove(this);
					}
					this._member1.Entity = value;
					if ((value != null))
					{
						value.Managements1.Add(this);
						this._MemberId = value.UserId;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("member1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Management", Storage="_Task", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Managements.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Managements.Add(this);
						this._TaskId = value.TaskId;
					}
					else
					{
						this._TaskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
